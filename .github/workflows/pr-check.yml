name: PR Check

on:
  pull_request:
    branches: [ master]

jobs:
  pr-check:
    name: PR Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_todoapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage flake8 black isort

    - name: Code Quality Checks
      run: |
        echo "Running code quality checks..."
        
        # Flake8 linting
        echo "Running flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # Black formatting check
        echo "Running black..."
        black --check .
        
        # isort import sorting check
        echo "Running isort..."
        isort --check-only .

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_todoapp
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        echo "Running tests..."
        python manage.py test --verbosity=2
        coverage run --source='.' manage.py test
        coverage report --fail-under=80
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Security Scan
      run: |
        echo "Running security scan..."
        pip install safety bandit
        safety check
        bandit -r . -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

    - name: Docker Build Test
      run: |
        echo "Testing Docker build..."
        docker build -t todoapp-test .
        docker run --rm todoapp-test python manage.py check

    - name: Comment PR with results
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          // Read test results
          let testResults = '‚úÖ All checks passed!';
          let hasErrors = false;
          
          try {
            // Check if there are any test failures
            const testOutput = '${{ steps.test.outcome }}';
            if (testOutput === 'failure') {
              testResults = '‚ùå Tests failed';
              hasErrors = true;
            }
          } catch (e) {
            console.log('Could not determine test results');
          }
          
          // Create comment
          const comment = `## üîç PR Check Results
          
          **Test Results:** ${testResults}
          
          **Code Quality:** ${{ steps.code-quality.outcome === 'success' ? '‚úÖ Passed' : '‚ùå Failed' }}
          **Security Scan:** ${{ steps.security-scan.outcome === 'success' ? '‚úÖ Passed' : '‚ùå Failed' }}
          **Docker Build:** ${{ steps.docker-build.outcome === 'success' ? '‚úÖ Passed' : '‚ùå Failed' }}
          
          ${hasErrors ? '‚ö†Ô∏è Please fix the issues above before merging.' : 'üéâ Ready for review!'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
