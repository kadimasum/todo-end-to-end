name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: todoapp
  ECS_SERVICE: todoapp-service
  ECS_CLUSTER: todoapp-cluster
  ECS_TASK_DEFINITION: todoapp-task-definition

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_todoapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_todoapp
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py test --verbosity=2
        coverage run --source='.' manage.py test
        coverage report --fail-under=80
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download build artifacts from S3
      run: |
        aws s3 sync s3://${{ secrets.S3_BUCKET }}/builds/ ./builds/

    - name: Upload build artifacts to S3
      run: |
        aws s3 cp . s3://${{ secrets.S3_BUCKET }}/builds/${{ github.sha }}/ --recursive

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./terraform

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./terraform
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        TF_VAR_secret_key: ${{ secrets.SECRET_KEY }}

    - name: Get Terraform outputs
      id: terraform-outputs
      run: |
        echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
        echo "rds_endpoint=$(terraform output -raw rds_endpoint)" >> $GITHUB_OUTPUT
        echo "redis_endpoint=$(terraform output -raw redis_endpoint)" >> $GITHUB_OUTPUT
        echo "static_bucket_name=$(terraform output -raw static_bucket_name)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Update Ansible inventory
      run: |
        sed -i "s/\${ALB_DNS_NAME}/${{ steps.terraform-outputs.outputs.alb_dns_name }}/g" ansible/inventory/hosts.yml
        sed -i "s/\${RDS_ENDPOINT}/${{ steps.terraform-outputs.outputs.rds_endpoint }}/g" ansible/inventory/hosts.yml
        sed -i "s/\${REDIS_ENDPOINT}/${{ steps.terraform-outputs.outputs.redis_endpoint }}/g" ansible/inventory/hosts.yml

  deploy-application:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3

    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ needs.deploy-infrastructure.outputs.alb_dns_name }} >> ~/.ssh/known_hosts

    - name: Create Ansible vault file
      run: |
        cat > ansible/vault.yml << EOF
        vault_django_secret_key: ${{ secrets.SECRET_KEY }}
        vault_db_name: ${{ secrets.DB_NAME }}
        vault_db_user: ${{ secrets.DB_USER }}
        vault_db_password: ${{ secrets.DB_PASSWORD }}
        vault_email_user: ${{ secrets.EMAIL_USER }}
        vault_email_password: ${{ secrets.EMAIL_PASSWORD }}
        EOF

    - name: Run Ansible playbook
      run: |
        cd ansible
        ansible-playbook -i inventory/hosts.yml playbooks/deploy.yml \
          --extra-vars "@vault.yml" \
          --extra-vars "alb_dns_name=${{ needs.deploy-infrastructure.outputs.alb_dns_name }}" \
          --extra-vars "rds_endpoint=${{ needs.deploy-infrastructure.outputs.rds_endpoint }}" \
          --extra-vars "redis_endpoint=${{ needs.deploy-infrastructure.outputs.redis_endpoint }}" \
          --extra-vars "static_bucket_name=${{ needs.deploy-infrastructure.outputs.static_bucket_name }}" \
          --extra-vars "git_commit_short=${{ github.sha }}"

    - name: Health Check
      run: |
        cd ansible
        ansible-playbook -i inventory/hosts.yml playbooks/health-check.yml

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-application]
    if: always()

    steps:
    - name: Notify Success
      if: needs.deploy-application.result == 'success'
      run: |
        echo "Deployment successful!"
        # Add Slack/Discord/Email notification here

    - name: Notify Failure
      if: needs.deploy-application.result == 'failure'
      run: |
        echo "Deployment failed!"
        # Add Slack/Discord/Email notification here

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible boto3

    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Rollback deployment
      run: |
        cd ansible
        ansible-playbook -i inventory/hosts.yml playbooks/rollback.yml \
          --extra-vars "rollback_backup_id=latest"
